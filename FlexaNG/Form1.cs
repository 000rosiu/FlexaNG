using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace FlexaNG
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            this.btn_proceed.Click += new System.EventHandler(this.btn_proceed_Click);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
        }

        private async void btn_proceed_Click(object sender, EventArgs e)
        {

            btn_proceed.Enabled = false;

            progressBar1.Value = 0;

            string computerName = Environment.MachineName;
            string currentDate = DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss");
            string outputFolderPath = Path.Combine(
                Application.StartupPath,
                $"FlexaNG_logs_{computerName}_{currentDate}");

            Directory.CreateDirectory(outputFolderPath);

            var progress = new Progress<int>(percent => {
                progressBar1.Value = percent;
            });

            await Task.Run(() => CollectData(outputFolderPath, progress));

            btn_proceed.Enabled = true;

            MessageBox.Show("Logs generated successfully!", "FlexaNG",
                MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private string GetFileHeader()
        {
            StringBuilder header = new StringBuilder();

            string asciiArtPath = Path.Combine(Application.StartupPath, "flexa-ascii.dat");
            if (File.Exists(asciiArtPath))
            {
                header.AppendLine(File.ReadAllText(asciiArtPath));
            }
            else
            {
                header.AppendLine(@"--__FlexaNG__--");
            }

            header.AppendLine("=======================================");
            header.AppendLine("LOG GENERATED BY FlexaNG v.0.1");
            header.AppendLine("https://github.com/000rosiu/FlexaNG");
            header.AppendLine("=======================================");
            header.AppendLine();

            return header.ToString();
        }

        private void SaveLogWithHeader(string content, string outputPath)
        {
            string header = GetFileHeader();
            File.WriteAllText(outputPath, header + content);
        }

        private void CopyDirectory(string sourceDir, string destDir)
        {
            if (!Directory.Exists(destDir))
            {
                Directory.CreateDirectory(destDir);
            }

            // Copy files
            foreach (string file in Directory.GetFiles(sourceDir))
            {
                try
                {
                    string destFile = Path.Combine(destDir, Path.GetFileName(file));
                    File.Copy(file, destFile, true);
                }
                catch (Exception)
                {
                }
            }

            foreach (string dir in Directory.GetDirectories(sourceDir))
            {
                try
                {
                    string destSubDir = Path.Combine(destDir, Path.GetFileName(dir));
                    CopyDirectory(dir, destSubDir);
                }
                catch (Exception)
                {
                }
            }
        }

        private void CollectData(string outputFolderPath, IProgress<int> progress)
        {
            int totalTasks = 40; 
            int completedTasks = 0;

            void UpdateProgress()
            {
                completedTasks++;
                int progressValue = Math.Min((int)((float)completedTasks / totalTasks * 100), 100);
                progress.Report(progressValue);
            }

            void RunAndSaveCommand(string command, string arguments, string outputFileName)
            {
                try
                {
                    Process process = new Process();
                    process.StartInfo.FileName = command;
                    process.StartInfo.Arguments = arguments;
                    process.StartInfo.UseShellExecute = false;
                    process.StartInfo.RedirectStandardOutput = true;
                    process.StartInfo.CreateNoWindow = true;
                    process.Start();

                    string output = process.StandardOutput.ReadToEnd();
                    process.WaitForExit();

                    SaveLogWithHeader(output, Path.Combine(outputFolderPath, outputFileName));
                }
                catch (Exception ex)
                {
                    SaveLogWithHeader($"Error executing command {command} {arguments}: {ex.Message}",
                        Path.Combine(outputFolderPath, outputFileName));
                }
            }

            try
            {
                // Version info
                RunAndSaveCommand("cmd.exe", "/c ver", "ver.log");
                UpdateProgress();

                // Volume info
                RunAndSaveCommand("cmd.exe", "/c vol", "vol.log");
                UpdateProgress();

                // IP configuration
                RunAndSaveCommand("ipconfig", "/all", "ipconfig.log");
                RunAndSaveCommand("ipconfig", "/displaydns", "ipconfig_dns.log");
                UpdateProgress();

                // User info
                RunAndSaveCommand("net", "user", "net-user.log");
                UpdateProgress();

                // File associations
                RunAndSaveCommand("cmd.exe", "/c assoc", "assoc.log");
                UpdateProgress();

                // Environment variables
                RunAndSaveCommand("cmd.exe", "/c set", "set.log");
                UpdateProgress();

                // Compression info
                RunAndSaveCommand("compact", "", "compact.log");
                UpdateProgress();

                // File types
                RunAndSaveCommand("cmd.exe", "/c ftype", "ftype.log");
                UpdateProgress();

                // Network connections
                RunAndSaveCommand("netstat", "-an", "netstat-an.log");
                UpdateProgress();

                // Power configuration
                RunAndSaveCommand("powercfg", "/a", "powercfg.log");
                UpdateProgress();

                // Process list
                RunAndSaveCommand("tasklist", "", "tasklist.log");
                UpdateProgress();

                // BIOS info
                RunAndSaveCommand("wmic", "bios get /all", "bios.log");
                UpdateProgress();

                // CPU info
                RunAndSaveCommand("wmic", "cpu get /all", "cpu.log");
                UpdateProgress();

                // System info
                RunAndSaveCommand("systeminfo", "", "systeminfo.log");
                UpdateProgress();

                // Timezone info
                RunAndSaveCommand("wmic", "timezone get /all", "timezone.log");
                UpdateProgress();

                // Graphics card info
                RunAndSaveCommand("wmic", "path win32_videocontroller get /all", "graphics.log");
                UpdateProgress();

                // RAM info
                RunAndSaveCommand("wmic", "memorychip get /all", "ram.log");
                UpdateProgress();

                // Disk info
                RunAndSaveCommand("wmic", "diskdrive get /all", "disk.log");
                UpdateProgress();

                // OS info
                RunAndSaveCommand("wmic", "os get /all", "os.log");
                UpdateProgress();

                // Information about installed programs
                RunAndSaveCommand("wmic", "product get name,version", "installed_software.log");
                UpdateProgress();

                // Information about system services
                RunAndSaveCommand("sc", "query", "services.log");
                UpdateProgress();

                // Information about drivers
                RunAndSaveCommand("driverquery", "/v", "drivers.log");
                UpdateProgress();

                // Information about disk partitions
                RunAndSaveCommand("wmic", "logicaldisk get caption,description,providername,volumename,size,freespace", "partitions.log");
                UpdateProgress();

                // Information about network interfaces
                RunAndSaveCommand("wmic", "nic get AdapterType,Name,Installed,MACAddress,NetConnectionID,Speed", "network_adapters.log");
                UpdateProgress();

                // Information about services launched
                RunAndSaveCommand("net", "start", "running_services.log");
                UpdateProgress();

                // Information about user groups
                RunAndSaveCommand("net", "localgroup", "user_groups.log");
                UpdateProgress();

                // Information about user accounts
                RunAndSaveCommand("wmic", "useraccount get name,sid,status,passwordrequired", "user_accounts.log");
                UpdateProgress();

                // Information about installed updates
                RunAndSaveCommand("wmic", "qfe get hotfixid,description,installedby,installedon", "installed_updates.log");
                UpdateProgress();

                // Information on scheduled tasks
                RunAndSaveCommand("schtasks", "/query /fo LIST /v", "scheduled_tasks.log");
                UpdateProgress();

                // Information about PnP devices
                RunAndSaveCommand("wmic", "path Win32_PnPEntity get Caption,DeviceID,Manufacturer,PNPDeviceID", "pnp_devices.log");
                UpdateProgress();

                // Information about firewall configuration
                RunAndSaveCommand("netsh", "advfirewall show allprofiles", "firewall.log");
                UpdateProgress();

                // Generate directory tree if checkbox is checked
                if (check_tree.Checked)
                {
                    string treeCommand = "cmd.exe";
                    string treeArgs = $"/c tree C:\\ /F /A > \"{Path.Combine(outputFolderPath, "directory_tree.log")}\"";

                    Process process = new Process();
                    process.StartInfo.FileName = treeCommand;
                    process.StartInfo.Arguments = treeArgs;
                    process.StartInfo.UseShellExecute = true;
                    process.StartInfo.CreateNoWindow = true;
                    process.Start();
                    process.WaitForExit();

                    string treeFilePath = Path.Combine(outputFolderPath, "directory_tree.log");
                    if (File.Exists(treeFilePath))
                    {
                        string content = File.ReadAllText(treeFilePath);
                        SaveLogWithHeader(content, treeFilePath);
                    }
                }
                UpdateProgress();

                // Collect browser data if checkbox is checked
                if (check_browsers.Checked)
                {
                    string browserDataPath = Path.Combine(outputFolderPath, "browser_data");
                    Directory.CreateDirectory(browserDataPath);

                    StringBuilder browserInfo = new StringBuilder();

                    // Chrome
                    string chromePath = Path.Combine(
                        Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
                        @"Google\Chrome\User Data\Default");

                    if (Directory.Exists(chromePath))
                    {
                        browserInfo.AppendLine("Google Chrome:");
                        browserInfo.AppendLine($"Profile path: {chromePath}");

                        string chromeBackupPath = Path.Combine(browserDataPath, "Chrome_Default");
                        Directory.CreateDirectory(chromeBackupPath);

                        try
                        {

                            string[] filesToCopy = {
                                "Bookmarks", "Cookies", "History", "Login Data", "Preferences",
                                "Web Data", "Favicons", "Shortcuts"
                            };

                            foreach (string file in filesToCopy)
                            {
                                string sourcePath = Path.Combine(chromePath, file);
                                if (File.Exists(sourcePath))
                                {
                                    File.Copy(sourcePath, Path.Combine(chromeBackupPath, file), true);
                                }
                            }

                            if (Directory.Exists(Path.Combine(chromePath, "Extensions")))
                            {
                                CopyDirectory(Path.Combine(chromePath, "Extensions"),
                                    Path.Combine(chromeBackupPath, "Extensions"));
                            }

                            browserInfo.AppendLine("Profile backup created successfully.");
                        }
                        catch (Exception ex)
                        {
                            browserInfo.AppendLine($"Error backing up Chrome profile: {ex.Message}");
                        }
                    }

                    // Firefox
                    string firefoxPath = Path.Combine(
                        Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
                        @"Mozilla\Firefox\Profiles");

                    if (Directory.Exists(firefoxPath))
                    {
                        browserInfo.AppendLine("\nMozilla Firefox:");
                        browserInfo.AppendLine($"Profiles path: {firefoxPath}");

                        string[] profiles = Directory.GetDirectories(firefoxPath);
                        foreach (string profile in profiles)
                        {
                            string profileName = Path.GetFileName(profile);
                            browserInfo.AppendLine($"Profile: {profileName}");

                            string firefoxBackupPath = Path.Combine(browserDataPath, "Firefox_" + profileName);
                            Directory.CreateDirectory(firefoxBackupPath);

                            try
                            {
                                string[] filesToCopy = {
                                    "places.sqlite", "cookies.sqlite", "formhistory.sqlite",
                                    "logins.json", "key4.db", "prefs.js", "addons.json"
                                };

                                foreach (string file in filesToCopy)
                                {
                                    string sourcePath = Path.Combine(profile, file);
                                    if (File.Exists(sourcePath))
                                    {
                                        File.Copy(sourcePath, Path.Combine(firefoxBackupPath, file), true);
                                    }
                                }

                                browserInfo.AppendLine("Profile backup created successfully.");
                            }
                            catch (Exception ex)
                            {
                                browserInfo.AppendLine($"Error backing up Firefox profile: {ex.Message}");
                            }
                        }
                    }

                    // Edge
                    string edgePath = Path.Combine(
                        Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
                        @"Microsoft\Edge\User Data\Default");

                    if (Directory.Exists(edgePath))
                    {
                        browserInfo.AppendLine("\nMicrosoft Edge:");
                        browserInfo.AppendLine($"Profile path: {edgePath}");

                        string edgeBackupPath = Path.Combine(browserDataPath, "Edge_Default");
                        Directory.CreateDirectory(edgeBackupPath);

                        try
                        {
                            string[] filesToCopy = {
                                "Bookmarks", "Cookies", "History", "Login Data", "Preferences",
                                "Web Data", "Favicons", "Shortcuts"
                            };

                            foreach (string file in filesToCopy)
                            {
                                string sourcePath = Path.Combine(edgePath, file);
                                if (File.Exists(sourcePath))
                                {
                                    File.Copy(sourcePath, Path.Combine(edgeBackupPath, file), true);
                                }
                            }

                            if (Directory.Exists(Path.Combine(edgePath, "Extensions")))
                            {
                                CopyDirectory(Path.Combine(edgePath, "Extensions"),
                                    Path.Combine(edgeBackupPath, "Extensions"));
                            }

                            browserInfo.AppendLine("Profile backup created successfully.");
                        }
                        catch (Exception ex)
                        {
                            browserInfo.AppendLine($"Error backing up Edge profile: {ex.Message}");
                        }
                    }

                    SaveLogWithHeader(browserInfo.ToString(), Path.Combine(browserDataPath, "browser_profiles.log"));
                }
                UpdateProgress();

                // Compress folder if checkbox is checked
                if (check_makezip.Checked)
                {
                    string sevenZipPath = Path.Combine(Application.StartupPath, "7z.exe");

                    if (File.Exists(sevenZipPath))
                    {
                        string zipPath = outputFolderPath + ".zip";

                        ProcessStartInfo processInfo = new ProcessStartInfo();
                        processInfo.FileName = sevenZipPath;
                        processInfo.Arguments = $"a -tzip \"{zipPath}\" \"{outputFolderPath}\\*\"";
                        processInfo.WindowStyle = ProcessWindowStyle.Hidden;

                        Process process = Process.Start(processInfo);
                        process.WaitForExit();
                    }
                    else
                    {
                        SaveLogWithHeader("7z.exe not found in application directory. Compression was not performed.",
                            Path.Combine(outputFolderPath, "compression_error.log"));
                    }
                }
                UpdateProgress();
            }
            catch (Exception ex)
            {
                SaveLogWithHeader($"Error during data collection: {ex.Message}",
                    Path.Combine(outputFolderPath, "error.log"));
            }
        }
    }
}
